$date
	Mon Oct  3 22:37:48 2016
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testor $end
$var wire 32 ! andResult [31:0] $end
$var wire 1 " carryout $end
$var wire 1 # overflow $end
$var reg 1 $ M $end
$var reg 32 % operandA [31:0] $end
$var reg 32 & operandB [31:0] $end
$scope module myALU $end
$var wire 1 ' M $end
$var wire 32 ( andResult [31:0] $end
$var wire 32 ) midResult [31:0] $end
$var wire 32 * operandA [31:0] $end
$var wire 32 + operandB [31:0] $end
$var reg 1 , carryout $end
$var reg 1 - overflow $end
$scope begin gen1[0] $end
$upscope $end
$scope begin gen1[1] $end
$upscope $end
$scope begin gen1[2] $end
$upscope $end
$scope begin gen1[3] $end
$upscope $end
$scope begin gen1[4] $end
$upscope $end
$scope begin gen1[5] $end
$upscope $end
$scope begin gen1[6] $end
$upscope $end
$scope begin gen1[7] $end
$upscope $end
$scope begin gen1[8] $end
$upscope $end
$scope begin gen1[9] $end
$upscope $end
$scope begin gen1[10] $end
$upscope $end
$scope begin gen1[11] $end
$upscope $end
$scope begin gen1[12] $end
$upscope $end
$scope begin gen1[13] $end
$upscope $end
$scope begin gen1[14] $end
$upscope $end
$scope begin gen1[15] $end
$upscope $end
$scope begin gen1[16] $end
$upscope $end
$scope begin gen1[17] $end
$upscope $end
$scope begin gen1[18] $end
$upscope $end
$scope begin gen1[19] $end
$upscope $end
$scope begin gen1[20] $end
$upscope $end
$scope begin gen1[21] $end
$upscope $end
$scope begin gen1[22] $end
$upscope $end
$scope begin gen1[23] $end
$upscope $end
$scope begin gen1[24] $end
$upscope $end
$scope begin gen1[25] $end
$upscope $end
$scope begin gen1[26] $end
$upscope $end
$scope begin gen1[27] $end
$upscope $end
$scope begin gen1[28] $end
$upscope $end
$scope begin gen1[29] $end
$upscope $end
$scope begin gen1[30] $end
$upscope $end
$scope begin gen1[31] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0-
0,
b0 +
b0 *
bz )
bx (
1'
b0 &
b0 %
1$
0#
0"
bx !
$end
#30000
b0 )
#90000
b11111111111111111111111111111111 !
b11111111111111111111111111111111 (
#1000000
b1001100011 &
b1001100011 +
b110000001 %
b110000001 *
#1030000
b1111100011 )
#1090000
b11111111111111111111110000011100 !
b11111111111111111111110000011100 (
#2000000
b101100001 &
b101100001 +
b101100001 %
b101100001 *
#2030000
b101100001 )
#2090000
b11111111111111111111111010011110 !
b11111111111111111111111010011110 (
#3000000
b1111000000001111000000000001 &
b1111000000001111000000000001 +
b11111111111111111111111111111111 %
b11111111111111111111111111111111 *
#3030000
b11111111111111111111111111111111 )
#3090000
b0 !
b0 (
#4000000
b11001100110011001100110011001100 &
b11001100110011001100110011001100 +
#5000000
