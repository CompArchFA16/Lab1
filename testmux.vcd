$date
	Wed Oct  5 21:21:06 2016
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module ALU $end
$var wire 32 ! addResult [31:0] $end
$var wire 32 " andResult [31:0] $end
$var wire 1 # carryin $end
$var wire 1 $ carryout $end
$var wire 3 % command [2:0] $end
$var wire 1 & enableOverflow $end
$var wire 32 ' flipA [31:0] $end
$var wire 32 ( flipB [31:0] $end
$var wire 1 ) invertA $end
$var wire 1 * invertB $end
$var wire 3 + muxindex [2:0] $end
$var wire 32 , operandA [31:0] $end
$var wire 32 - operandB [31:0] $end
$var wire 32 . orResult [31:0] $end
$var wire 1 / overflow $end
$var wire 32 0 result [31:0] $end
$var wire 1 1 sltCheck1 $end
$var wire 1 2 sltCheck2 $end
$var wire 1 3 sltResult $end
$var wire 32 4 sltResult32 [31:0] $end
$var wire 32 5 xorResult [31:0] $end
$var wire 1 6 zero $end
$scope module myLUT $end
$var wire 3 7 ALUcommand [2:0] $end
$var reg 1 8 carryin $end
$var reg 1 9 enableOverflow $end
$var reg 1 : invertA $end
$var reg 1 ; invertB $end
$var reg 3 < muxindex [2:0] $end
$upscope $end
$scope module myand $end
$var wire 32 = andResult [31:0] $end
$var wire 32 > operandA [31:0] $end
$var wire 32 ? operandB [31:0] $end
$var reg 1 @ carryout $end
$var reg 1 A overflow $end
$scope begin genand[0] $end
$upscope $end
$scope begin genand[1] $end
$upscope $end
$scope begin genand[2] $end
$upscope $end
$scope begin genand[3] $end
$upscope $end
$scope begin genand[4] $end
$upscope $end
$scope begin genand[5] $end
$upscope $end
$scope begin genand[6] $end
$upscope $end
$scope begin genand[7] $end
$upscope $end
$scope begin genand[8] $end
$upscope $end
$scope begin genand[9] $end
$upscope $end
$scope begin genand[10] $end
$upscope $end
$scope begin genand[11] $end
$upscope $end
$scope begin genand[12] $end
$upscope $end
$scope begin genand[13] $end
$upscope $end
$scope begin genand[14] $end
$upscope $end
$scope begin genand[15] $end
$upscope $end
$scope begin genand[16] $end
$upscope $end
$scope begin genand[17] $end
$upscope $end
$scope begin genand[18] $end
$upscope $end
$scope begin genand[19] $end
$upscope $end
$scope begin genand[20] $end
$upscope $end
$scope begin genand[21] $end
$upscope $end
$scope begin genand[22] $end
$upscope $end
$scope begin genand[23] $end
$upscope $end
$scope begin genand[24] $end
$upscope $end
$scope begin genand[25] $end
$upscope $end
$scope begin genand[26] $end
$upscope $end
$scope begin genand[27] $end
$upscope $end
$scope begin genand[28] $end
$upscope $end
$scope begin genand[29] $end
$upscope $end
$scope begin genand[30] $end
$upscope $end
$scope begin genand[31] $end
$upscope $end
$upscope $end
$scope module myor $end
$var wire 32 B operandA [31:0] $end
$var wire 32 C operandB [31:0] $end
$var wire 32 D orResult [31:0] $end
$var reg 1 E carryout $end
$var reg 1 F overflow $end
$scope begin gen1[0] $end
$upscope $end
$scope begin gen1[1] $end
$upscope $end
$scope begin gen1[2] $end
$upscope $end
$scope begin gen1[3] $end
$upscope $end
$scope begin gen1[4] $end
$upscope $end
$scope begin gen1[5] $end
$upscope $end
$scope begin gen1[6] $end
$upscope $end
$scope begin gen1[7] $end
$upscope $end
$scope begin gen1[8] $end
$upscope $end
$scope begin gen1[9] $end
$upscope $end
$scope begin gen1[10] $end
$upscope $end
$scope begin gen1[11] $end
$upscope $end
$scope begin gen1[12] $end
$upscope $end
$scope begin gen1[13] $end
$upscope $end
$scope begin gen1[14] $end
$upscope $end
$scope begin gen1[15] $end
$upscope $end
$scope begin gen1[16] $end
$upscope $end
$scope begin gen1[17] $end
$upscope $end
$scope begin gen1[18] $end
$upscope $end
$scope begin gen1[19] $end
$upscope $end
$scope begin gen1[20] $end
$upscope $end
$scope begin gen1[21] $end
$upscope $end
$scope begin gen1[22] $end
$upscope $end
$scope begin gen1[23] $end
$upscope $end
$scope begin gen1[24] $end
$upscope $end
$scope begin gen1[25] $end
$upscope $end
$scope begin gen1[26] $end
$upscope $end
$scope begin gen1[27] $end
$upscope $end
$scope begin gen1[28] $end
$upscope $end
$scope begin gen1[29] $end
$upscope $end
$scope begin gen1[30] $end
$upscope $end
$scope begin gen1[31] $end
$upscope $end
$upscope $end
$scope module myxor $end
$var wire 32 G operandA [31:0] $end
$var wire 32 H operandB [31:0] $end
$var wire 32 I xorResult [31:0] $end
$scope begin gen1[0] $end
$upscope $end
$scope begin gen1[1] $end
$upscope $end
$scope begin gen1[2] $end
$upscope $end
$scope begin gen1[3] $end
$upscope $end
$scope begin gen1[4] $end
$upscope $end
$scope begin gen1[5] $end
$upscope $end
$scope begin gen1[6] $end
$upscope $end
$scope begin gen1[7] $end
$upscope $end
$scope begin gen1[8] $end
$upscope $end
$scope begin gen1[9] $end
$upscope $end
$scope begin gen1[10] $end
$upscope $end
$scope begin gen1[11] $end
$upscope $end
$scope begin gen1[12] $end
$upscope $end
$scope begin gen1[13] $end
$upscope $end
$scope begin gen1[14] $end
$upscope $end
$scope begin gen1[15] $end
$upscope $end
$scope begin gen1[16] $end
$upscope $end
$scope begin gen1[17] $end
$upscope $end
$scope begin gen1[18] $end
$upscope $end
$scope begin gen1[19] $end
$upscope $end
$scope begin gen1[20] $end
$upscope $end
$scope begin gen1[21] $end
$upscope $end
$scope begin gen1[22] $end
$upscope $end
$scope begin gen1[23] $end
$upscope $end
$scope begin gen1[24] $end
$upscope $end
$scope begin gen1[25] $end
$upscope $end
$scope begin gen1[26] $end
$upscope $end
$scope begin gen1[27] $end
$upscope $end
$scope begin gen1[28] $end
$upscope $end
$scope begin gen1[29] $end
$upscope $end
$scope begin gen1[30] $end
$upscope $end
$scope begin gen1[31] $end
$upscope $end
$upscope $end
$scope module myadd $end
$var wire 1 # M $end
$var wire 32 J MxorB [31:0] $end
$var wire 32 K addResult [31:0] $end
$var wire 1 $ carryout $end
$var wire 31 L carryoutin [30:0] $end
$var wire 32 M operandA [31:0] $end
$var wire 32 N operandB [31:0] $end
$var wire 1 / overflow $end
$scope module myxor $end
$var wire 32 O operandA [31:0] $end
$var wire 1 # operandB $end
$var wire 32 P xorResult [31:0] $end
$scope begin gen1[0] $end
$upscope $end
$scope begin gen1[1] $end
$upscope $end
$scope begin gen1[2] $end
$upscope $end
$scope begin gen1[3] $end
$upscope $end
$scope begin gen1[4] $end
$upscope $end
$scope begin gen1[5] $end
$upscope $end
$scope begin gen1[6] $end
$upscope $end
$scope begin gen1[7] $end
$upscope $end
$scope begin gen1[8] $end
$upscope $end
$scope begin gen1[9] $end
$upscope $end
$scope begin gen1[10] $end
$upscope $end
$scope begin gen1[11] $end
$upscope $end
$scope begin gen1[12] $end
$upscope $end
$scope begin gen1[13] $end
$upscope $end
$scope begin gen1[14] $end
$upscope $end
$scope begin gen1[15] $end
$upscope $end
$scope begin gen1[16] $end
$upscope $end
$scope begin gen1[17] $end
$upscope $end
$scope begin gen1[18] $end
$upscope $end
$scope begin gen1[19] $end
$upscope $end
$scope begin gen1[20] $end
$upscope $end
$scope begin gen1[21] $end
$upscope $end
$scope begin gen1[22] $end
$upscope $end
$scope begin gen1[23] $end
$upscope $end
$scope begin gen1[24] $end
$upscope $end
$scope begin gen1[25] $end
$upscope $end
$scope begin gen1[26] $end
$upscope $end
$scope begin gen1[27] $end
$upscope $end
$scope begin gen1[28] $end
$upscope $end
$scope begin gen1[29] $end
$upscope $end
$scope begin gen1[30] $end
$upscope $end
$scope begin gen1[31] $end
$upscope $end
$upscope $end
$scope module add0 $end
$var wire 1 Q AandB $end
$var wire 1 R AxorB $end
$var wire 1 S AxorBandcarryin $end
$var wire 1 T a $end
$var wire 1 U b $end
$var wire 1 # carryin $end
$var wire 1 V carryout $end
$var wire 1 W sum $end
$upscope $end
$scope module add31 $end
$var wire 1 X AandB $end
$var wire 1 Y AxorB $end
$var wire 1 Z AxorBandcarryin $end
$var wire 1 [ a $end
$var wire 1 \ b $end
$var wire 1 ] carryin $end
$var wire 1 $ carryout $end
$var wire 1 ^ sum $end
$upscope $end
$scope begin gen1[1] $end
$scope module addgates $end
$var wire 1 _ AandB $end
$var wire 1 ` AxorB $end
$var wire 1 a AxorBandcarryin $end
$var wire 1 b a $end
$var wire 1 c b $end
$var wire 1 d carryin $end
$var wire 1 e carryout $end
$var wire 1 f sum $end
$upscope $end
$upscope $end
$scope begin gen1[2] $end
$scope module addgates $end
$var wire 1 g AandB $end
$var wire 1 h AxorB $end
$var wire 1 i AxorBandcarryin $end
$var wire 1 j a $end
$var wire 1 k b $end
$var wire 1 l carryin $end
$var wire 1 m carryout $end
$var wire 1 n sum $end
$upscope $end
$upscope $end
$scope begin gen1[3] $end
$scope module addgates $end
$var wire 1 o AandB $end
$var wire 1 p AxorB $end
$var wire 1 q AxorBandcarryin $end
$var wire 1 r a $end
$var wire 1 s b $end
$var wire 1 t carryin $end
$var wire 1 u carryout $end
$var wire 1 v sum $end
$upscope $end
$upscope $end
$scope begin gen1[4] $end
$scope module addgates $end
$var wire 1 w AandB $end
$var wire 1 x AxorB $end
$var wire 1 y AxorBandcarryin $end
$var wire 1 z a $end
$var wire 1 { b $end
$var wire 1 | carryin $end
$var wire 1 } carryout $end
$var wire 1 ~ sum $end
$upscope $end
$upscope $end
$scope begin gen1[5] $end
$scope module addgates $end
$var wire 1 !" AandB $end
$var wire 1 "" AxorB $end
$var wire 1 #" AxorBandcarryin $end
$var wire 1 $" a $end
$var wire 1 %" b $end
$var wire 1 &" carryin $end
$var wire 1 '" carryout $end
$var wire 1 (" sum $end
$upscope $end
$upscope $end
$scope begin gen1[6] $end
$scope module addgates $end
$var wire 1 )" AandB $end
$var wire 1 *" AxorB $end
$var wire 1 +" AxorBandcarryin $end
$var wire 1 ," a $end
$var wire 1 -" b $end
$var wire 1 ." carryin $end
$var wire 1 /" carryout $end
$var wire 1 0" sum $end
$upscope $end
$upscope $end
$scope begin gen1[7] $end
$scope module addgates $end
$var wire 1 1" AandB $end
$var wire 1 2" AxorB $end
$var wire 1 3" AxorBandcarryin $end
$var wire 1 4" a $end
$var wire 1 5" b $end
$var wire 1 6" carryin $end
$var wire 1 7" carryout $end
$var wire 1 8" sum $end
$upscope $end
$upscope $end
$scope begin gen1[8] $end
$scope module addgates $end
$var wire 1 9" AandB $end
$var wire 1 :" AxorB $end
$var wire 1 ;" AxorBandcarryin $end
$var wire 1 <" a $end
$var wire 1 =" b $end
$var wire 1 >" carryin $end
$var wire 1 ?" carryout $end
$var wire 1 @" sum $end
$upscope $end
$upscope $end
$scope begin gen1[9] $end
$scope module addgates $end
$var wire 1 A" AandB $end
$var wire 1 B" AxorB $end
$var wire 1 C" AxorBandcarryin $end
$var wire 1 D" a $end
$var wire 1 E" b $end
$var wire 1 F" carryin $end
$var wire 1 G" carryout $end
$var wire 1 H" sum $end
$upscope $end
$upscope $end
$scope begin gen1[10] $end
$scope module addgates $end
$var wire 1 I" AandB $end
$var wire 1 J" AxorB $end
$var wire 1 K" AxorBandcarryin $end
$var wire 1 L" a $end
$var wire 1 M" b $end
$var wire 1 N" carryin $end
$var wire 1 O" carryout $end
$var wire 1 P" sum $end
$upscope $end
$upscope $end
$scope begin gen1[11] $end
$scope module addgates $end
$var wire 1 Q" AandB $end
$var wire 1 R" AxorB $end
$var wire 1 S" AxorBandcarryin $end
$var wire 1 T" a $end
$var wire 1 U" b $end
$var wire 1 V" carryin $end
$var wire 1 W" carryout $end
$var wire 1 X" sum $end
$upscope $end
$upscope $end
$scope begin gen1[12] $end
$scope module addgates $end
$var wire 1 Y" AandB $end
$var wire 1 Z" AxorB $end
$var wire 1 [" AxorBandcarryin $end
$var wire 1 \" a $end
$var wire 1 ]" b $end
$var wire 1 ^" carryin $end
$var wire 1 _" carryout $end
$var wire 1 `" sum $end
$upscope $end
$upscope $end
$scope begin gen1[13] $end
$scope module addgates $end
$var wire 1 a" AandB $end
$var wire 1 b" AxorB $end
$var wire 1 c" AxorBandcarryin $end
$var wire 1 d" a $end
$var wire 1 e" b $end
$var wire 1 f" carryin $end
$var wire 1 g" carryout $end
$var wire 1 h" sum $end
$upscope $end
$upscope $end
$scope begin gen1[14] $end
$scope module addgates $end
$var wire 1 i" AandB $end
$var wire 1 j" AxorB $end
$var wire 1 k" AxorBandcarryin $end
$var wire 1 l" a $end
$var wire 1 m" b $end
$var wire 1 n" carryin $end
$var wire 1 o" carryout $end
$var wire 1 p" sum $end
$upscope $end
$upscope $end
$scope begin gen1[15] $end
$scope module addgates $end
$var wire 1 q" AandB $end
$var wire 1 r" AxorB $end
$var wire 1 s" AxorBandcarryin $end
$var wire 1 t" a $end
$var wire 1 u" b $end
$var wire 1 v" carryin $end
$var wire 1 w" carryout $end
$var wire 1 x" sum $end
$upscope $end
$upscope $end
$scope begin gen1[16] $end
$scope module addgates $end
$var wire 1 y" AandB $end
$var wire 1 z" AxorB $end
$var wire 1 {" AxorBandcarryin $end
$var wire 1 |" a $end
$var wire 1 }" b $end
$var wire 1 ~" carryin $end
$var wire 1 !# carryout $end
$var wire 1 "# sum $end
$upscope $end
$upscope $end
$scope begin gen1[17] $end
$scope module addgates $end
$var wire 1 ## AandB $end
$var wire 1 $# AxorB $end
$var wire 1 %# AxorBandcarryin $end
$var wire 1 &# a $end
$var wire 1 '# b $end
$var wire 1 (# carryin $end
$var wire 1 )# carryout $end
$var wire 1 *# sum $end
$upscope $end
$upscope $end
$scope begin gen1[18] $end
$scope module addgates $end
$var wire 1 +# AandB $end
$var wire 1 ,# AxorB $end
$var wire 1 -# AxorBandcarryin $end
$var wire 1 .# a $end
$var wire 1 /# b $end
$var wire 1 0# carryin $end
$var wire 1 1# carryout $end
$var wire 1 2# sum $end
$upscope $end
$upscope $end
$scope begin gen1[19] $end
$scope module addgates $end
$var wire 1 3# AandB $end
$var wire 1 4# AxorB $end
$var wire 1 5# AxorBandcarryin $end
$var wire 1 6# a $end
$var wire 1 7# b $end
$var wire 1 8# carryin $end
$var wire 1 9# carryout $end
$var wire 1 :# sum $end
$upscope $end
$upscope $end
$scope begin gen1[20] $end
$scope module addgates $end
$var wire 1 ;# AandB $end
$var wire 1 <# AxorB $end
$var wire 1 =# AxorBandcarryin $end
$var wire 1 ># a $end
$var wire 1 ?# b $end
$var wire 1 @# carryin $end
$var wire 1 A# carryout $end
$var wire 1 B# sum $end
$upscope $end
$upscope $end
$scope begin gen1[21] $end
$scope module addgates $end
$var wire 1 C# AandB $end
$var wire 1 D# AxorB $end
$var wire 1 E# AxorBandcarryin $end
$var wire 1 F# a $end
$var wire 1 G# b $end
$var wire 1 H# carryin $end
$var wire 1 I# carryout $end
$var wire 1 J# sum $end
$upscope $end
$upscope $end
$scope begin gen1[22] $end
$scope module addgates $end
$var wire 1 K# AandB $end
$var wire 1 L# AxorB $end
$var wire 1 M# AxorBandcarryin $end
$var wire 1 N# a $end
$var wire 1 O# b $end
$var wire 1 P# carryin $end
$var wire 1 Q# carryout $end
$var wire 1 R# sum $end
$upscope $end
$upscope $end
$scope begin gen1[23] $end
$scope module addgates $end
$var wire 1 S# AandB $end
$var wire 1 T# AxorB $end
$var wire 1 U# AxorBandcarryin $end
$var wire 1 V# a $end
$var wire 1 W# b $end
$var wire 1 X# carryin $end
$var wire 1 Y# carryout $end
$var wire 1 Z# sum $end
$upscope $end
$upscope $end
$scope begin gen1[24] $end
$scope module addgates $end
$var wire 1 [# AandB $end
$var wire 1 \# AxorB $end
$var wire 1 ]# AxorBandcarryin $end
$var wire 1 ^# a $end
$var wire 1 _# b $end
$var wire 1 `# carryin $end
$var wire 1 a# carryout $end
$var wire 1 b# sum $end
$upscope $end
$upscope $end
$scope begin gen1[25] $end
$scope module addgates $end
$var wire 1 c# AandB $end
$var wire 1 d# AxorB $end
$var wire 1 e# AxorBandcarryin $end
$var wire 1 f# a $end
$var wire 1 g# b $end
$var wire 1 h# carryin $end
$var wire 1 i# carryout $end
$var wire 1 j# sum $end
$upscope $end
$upscope $end
$scope begin gen1[26] $end
$scope module addgates $end
$var wire 1 k# AandB $end
$var wire 1 l# AxorB $end
$var wire 1 m# AxorBandcarryin $end
$var wire 1 n# a $end
$var wire 1 o# b $end
$var wire 1 p# carryin $end
$var wire 1 q# carryout $end
$var wire 1 r# sum $end
$upscope $end
$upscope $end
$scope begin gen1[27] $end
$scope module addgates $end
$var wire 1 s# AandB $end
$var wire 1 t# AxorB $end
$var wire 1 u# AxorBandcarryin $end
$var wire 1 v# a $end
$var wire 1 w# b $end
$var wire 1 x# carryin $end
$var wire 1 y# carryout $end
$var wire 1 z# sum $end
$upscope $end
$upscope $end
$scope begin gen1[28] $end
$scope module addgates $end
$var wire 1 {# AandB $end
$var wire 1 |# AxorB $end
$var wire 1 }# AxorBandcarryin $end
$var wire 1 ~# a $end
$var wire 1 !$ b $end
$var wire 1 "$ carryin $end
$var wire 1 #$ carryout $end
$var wire 1 $$ sum $end
$upscope $end
$upscope $end
$scope begin gen1[29] $end
$scope module addgates $end
$var wire 1 %$ AandB $end
$var wire 1 &$ AxorB $end
$var wire 1 '$ AxorBandcarryin $end
$var wire 1 ($ a $end
$var wire 1 )$ b $end
$var wire 1 *$ carryin $end
$var wire 1 +$ carryout $end
$var wire 1 ,$ sum $end
$upscope $end
$upscope $end
$scope begin gen1[30] $end
$scope module addgates $end
$var wire 1 -$ AandB $end
$var wire 1 .$ AxorB $end
$var wire 1 /$ AxorBandcarryin $end
$var wire 1 0$ a $end
$var wire 1 1$ b $end
$var wire 1 2$ carryin $end
$var wire 1 3$ carryout $end
$var wire 1 4$ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module myslt $end
$var wire 1 5$ carryout $end
$var wire 32 6$ operandA [31:0] $end
$var wire 32 7$ operandB [31:0] $end
$var wire 1 8$ overflow $end
$var wire 1 3 sltResult $end
$var wire 32 9$ subResult [31:0] $end
$scope module myALU $end
$var wire 1 :$ M $end
$var wire 32 ;$ MxorB [31:0] $end
$var wire 32 <$ addResult [31:0] $end
$var wire 1 5$ carryout $end
$var wire 31 =$ carryoutin [30:0] $end
$var wire 32 >$ operandA [31:0] $end
$var wire 32 ?$ operandB [31:0] $end
$var wire 1 8$ overflow $end
$scope module myxor $end
$var wire 32 @$ operandA [31:0] $end
$var wire 1 :$ operandB $end
$var wire 32 A$ xorResult [31:0] $end
$scope begin gen1[0] $end
$upscope $end
$scope begin gen1[1] $end
$upscope $end
$scope begin gen1[2] $end
$upscope $end
$scope begin gen1[3] $end
$upscope $end
$scope begin gen1[4] $end
$upscope $end
$scope begin gen1[5] $end
$upscope $end
$scope begin gen1[6] $end
$upscope $end
$scope begin gen1[7] $end
$upscope $end
$scope begin gen1[8] $end
$upscope $end
$scope begin gen1[9] $end
$upscope $end
$scope begin gen1[10] $end
$upscope $end
$scope begin gen1[11] $end
$upscope $end
$scope begin gen1[12] $end
$upscope $end
$scope begin gen1[13] $end
$upscope $end
$scope begin gen1[14] $end
$upscope $end
$scope begin gen1[15] $end
$upscope $end
$scope begin gen1[16] $end
$upscope $end
$scope begin gen1[17] $end
$upscope $end
$scope begin gen1[18] $end
$upscope $end
$scope begin gen1[19] $end
$upscope $end
$scope begin gen1[20] $end
$upscope $end
$scope begin gen1[21] $end
$upscope $end
$scope begin gen1[22] $end
$upscope $end
$scope begin gen1[23] $end
$upscope $end
$scope begin gen1[24] $end
$upscope $end
$scope begin gen1[25] $end
$upscope $end
$scope begin gen1[26] $end
$upscope $end
$scope begin gen1[27] $end
$upscope $end
$scope begin gen1[28] $end
$upscope $end
$scope begin gen1[29] $end
$upscope $end
$scope begin gen1[30] $end
$upscope $end
$scope begin gen1[31] $end
$upscope $end
$upscope $end
$scope module add0 $end
$var wire 1 B$ AandB $end
$var wire 1 C$ AxorB $end
$var wire 1 D$ AxorBandcarryin $end
$var wire 1 E$ a $end
$var wire 1 F$ b $end
$var wire 1 :$ carryin $end
$var wire 1 G$ carryout $end
$var wire 1 H$ sum $end
$upscope $end
$scope module add31 $end
$var wire 1 I$ AandB $end
$var wire 1 J$ AxorB $end
$var wire 1 K$ AxorBandcarryin $end
$var wire 1 L$ a $end
$var wire 1 M$ b $end
$var wire 1 N$ carryin $end
$var wire 1 5$ carryout $end
$var wire 1 O$ sum $end
$upscope $end
$scope begin gen1[1] $end
$scope module addgates $end
$var wire 1 P$ AandB $end
$var wire 1 Q$ AxorB $end
$var wire 1 R$ AxorBandcarryin $end
$var wire 1 S$ a $end
$var wire 1 T$ b $end
$var wire 1 U$ carryin $end
$var wire 1 V$ carryout $end
$var wire 1 W$ sum $end
$upscope $end
$upscope $end
$scope begin gen1[2] $end
$scope module addgates $end
$var wire 1 X$ AandB $end
$var wire 1 Y$ AxorB $end
$var wire 1 Z$ AxorBandcarryin $end
$var wire 1 [$ a $end
$var wire 1 \$ b $end
$var wire 1 ]$ carryin $end
$var wire 1 ^$ carryout $end
$var wire 1 _$ sum $end
$upscope $end
$upscope $end
$scope begin gen1[3] $end
$scope module addgates $end
$var wire 1 `$ AandB $end
$var wire 1 a$ AxorB $end
$var wire 1 b$ AxorBandcarryin $end
$var wire 1 c$ a $end
$var wire 1 d$ b $end
$var wire 1 e$ carryin $end
$var wire 1 f$ carryout $end
$var wire 1 g$ sum $end
$upscope $end
$upscope $end
$scope begin gen1[4] $end
$scope module addgates $end
$var wire 1 h$ AandB $end
$var wire 1 i$ AxorB $end
$var wire 1 j$ AxorBandcarryin $end
$var wire 1 k$ a $end
$var wire 1 l$ b $end
$var wire 1 m$ carryin $end
$var wire 1 n$ carryout $end
$var wire 1 o$ sum $end
$upscope $end
$upscope $end
$scope begin gen1[5] $end
$scope module addgates $end
$var wire 1 p$ AandB $end
$var wire 1 q$ AxorB $end
$var wire 1 r$ AxorBandcarryin $end
$var wire 1 s$ a $end
$var wire 1 t$ b $end
$var wire 1 u$ carryin $end
$var wire 1 v$ carryout $end
$var wire 1 w$ sum $end
$upscope $end
$upscope $end
$scope begin gen1[6] $end
$scope module addgates $end
$var wire 1 x$ AandB $end
$var wire 1 y$ AxorB $end
$var wire 1 z$ AxorBandcarryin $end
$var wire 1 {$ a $end
$var wire 1 |$ b $end
$var wire 1 }$ carryin $end
$var wire 1 ~$ carryout $end
$var wire 1 !% sum $end
$upscope $end
$upscope $end
$scope begin gen1[7] $end
$scope module addgates $end
$var wire 1 "% AandB $end
$var wire 1 #% AxorB $end
$var wire 1 $% AxorBandcarryin $end
$var wire 1 %% a $end
$var wire 1 &% b $end
$var wire 1 '% carryin $end
$var wire 1 (% carryout $end
$var wire 1 )% sum $end
$upscope $end
$upscope $end
$scope begin gen1[8] $end
$scope module addgates $end
$var wire 1 *% AandB $end
$var wire 1 +% AxorB $end
$var wire 1 ,% AxorBandcarryin $end
$var wire 1 -% a $end
$var wire 1 .% b $end
$var wire 1 /% carryin $end
$var wire 1 0% carryout $end
$var wire 1 1% sum $end
$upscope $end
$upscope $end
$scope begin gen1[9] $end
$scope module addgates $end
$var wire 1 2% AandB $end
$var wire 1 3% AxorB $end
$var wire 1 4% AxorBandcarryin $end
$var wire 1 5% a $end
$var wire 1 6% b $end
$var wire 1 7% carryin $end
$var wire 1 8% carryout $end
$var wire 1 9% sum $end
$upscope $end
$upscope $end
$scope begin gen1[10] $end
$scope module addgates $end
$var wire 1 :% AandB $end
$var wire 1 ;% AxorB $end
$var wire 1 <% AxorBandcarryin $end
$var wire 1 =% a $end
$var wire 1 >% b $end
$var wire 1 ?% carryin $end
$var wire 1 @% carryout $end
$var wire 1 A% sum $end
$upscope $end
$upscope $end
$scope begin gen1[11] $end
$scope module addgates $end
$var wire 1 B% AandB $end
$var wire 1 C% AxorB $end
$var wire 1 D% AxorBandcarryin $end
$var wire 1 E% a $end
$var wire 1 F% b $end
$var wire 1 G% carryin $end
$var wire 1 H% carryout $end
$var wire 1 I% sum $end
$upscope $end
$upscope $end
$scope begin gen1[12] $end
$scope module addgates $end
$var wire 1 J% AandB $end
$var wire 1 K% AxorB $end
$var wire 1 L% AxorBandcarryin $end
$var wire 1 M% a $end
$var wire 1 N% b $end
$var wire 1 O% carryin $end
$var wire 1 P% carryout $end
$var wire 1 Q% sum $end
$upscope $end
$upscope $end
$scope begin gen1[13] $end
$scope module addgates $end
$var wire 1 R% AandB $end
$var wire 1 S% AxorB $end
$var wire 1 T% AxorBandcarryin $end
$var wire 1 U% a $end
$var wire 1 V% b $end
$var wire 1 W% carryin $end
$var wire 1 X% carryout $end
$var wire 1 Y% sum $end
$upscope $end
$upscope $end
$scope begin gen1[14] $end
$scope module addgates $end
$var wire 1 Z% AandB $end
$var wire 1 [% AxorB $end
$var wire 1 \% AxorBandcarryin $end
$var wire 1 ]% a $end
$var wire 1 ^% b $end
$var wire 1 _% carryin $end
$var wire 1 `% carryout $end
$var wire 1 a% sum $end
$upscope $end
$upscope $end
$scope begin gen1[15] $end
$scope module addgates $end
$var wire 1 b% AandB $end
$var wire 1 c% AxorB $end
$var wire 1 d% AxorBandcarryin $end
$var wire 1 e% a $end
$var wire 1 f% b $end
$var wire 1 g% carryin $end
$var wire 1 h% carryout $end
$var wire 1 i% sum $end
$upscope $end
$upscope $end
$scope begin gen1[16] $end
$scope module addgates $end
$var wire 1 j% AandB $end
$var wire 1 k% AxorB $end
$var wire 1 l% AxorBandcarryin $end
$var wire 1 m% a $end
$var wire 1 n% b $end
$var wire 1 o% carryin $end
$var wire 1 p% carryout $end
$var wire 1 q% sum $end
$upscope $end
$upscope $end
$scope begin gen1[17] $end
$scope module addgates $end
$var wire 1 r% AandB $end
$var wire 1 s% AxorB $end
$var wire 1 t% AxorBandcarryin $end
$var wire 1 u% a $end
$var wire 1 v% b $end
$var wire 1 w% carryin $end
$var wire 1 x% carryout $end
$var wire 1 y% sum $end
$upscope $end
$upscope $end
$scope begin gen1[18] $end
$scope module addgates $end
$var wire 1 z% AandB $end
$var wire 1 {% AxorB $end
$var wire 1 |% AxorBandcarryin $end
$var wire 1 }% a $end
$var wire 1 ~% b $end
$var wire 1 !& carryin $end
$var wire 1 "& carryout $end
$var wire 1 #& sum $end
$upscope $end
$upscope $end
$scope begin gen1[19] $end
$scope module addgates $end
$var wire 1 $& AandB $end
$var wire 1 %& AxorB $end
$var wire 1 && AxorBandcarryin $end
$var wire 1 '& a $end
$var wire 1 (& b $end
$var wire 1 )& carryin $end
$var wire 1 *& carryout $end
$var wire 1 +& sum $end
$upscope $end
$upscope $end
$scope begin gen1[20] $end
$scope module addgates $end
$var wire 1 ,& AandB $end
$var wire 1 -& AxorB $end
$var wire 1 .& AxorBandcarryin $end
$var wire 1 /& a $end
$var wire 1 0& b $end
$var wire 1 1& carryin $end
$var wire 1 2& carryout $end
$var wire 1 3& sum $end
$upscope $end
$upscope $end
$scope begin gen1[21] $end
$scope module addgates $end
$var wire 1 4& AandB $end
$var wire 1 5& AxorB $end
$var wire 1 6& AxorBandcarryin $end
$var wire 1 7& a $end
$var wire 1 8& b $end
$var wire 1 9& carryin $end
$var wire 1 :& carryout $end
$var wire 1 ;& sum $end
$upscope $end
$upscope $end
$scope begin gen1[22] $end
$scope module addgates $end
$var wire 1 <& AandB $end
$var wire 1 =& AxorB $end
$var wire 1 >& AxorBandcarryin $end
$var wire 1 ?& a $end
$var wire 1 @& b $end
$var wire 1 A& carryin $end
$var wire 1 B& carryout $end
$var wire 1 C& sum $end
$upscope $end
$upscope $end
$scope begin gen1[23] $end
$scope module addgates $end
$var wire 1 D& AandB $end
$var wire 1 E& AxorB $end
$var wire 1 F& AxorBandcarryin $end
$var wire 1 G& a $end
$var wire 1 H& b $end
$var wire 1 I& carryin $end
$var wire 1 J& carryout $end
$var wire 1 K& sum $end
$upscope $end
$upscope $end
$scope begin gen1[24] $end
$scope module addgates $end
$var wire 1 L& AandB $end
$var wire 1 M& AxorB $end
$var wire 1 N& AxorBandcarryin $end
$var wire 1 O& a $end
$var wire 1 P& b $end
$var wire 1 Q& carryin $end
$var wire 1 R& carryout $end
$var wire 1 S& sum $end
$upscope $end
$upscope $end
$scope begin gen1[25] $end
$scope module addgates $end
$var wire 1 T& AandB $end
$var wire 1 U& AxorB $end
$var wire 1 V& AxorBandcarryin $end
$var wire 1 W& a $end
$var wire 1 X& b $end
$var wire 1 Y& carryin $end
$var wire 1 Z& carryout $end
$var wire 1 [& sum $end
$upscope $end
$upscope $end
$scope begin gen1[26] $end
$scope module addgates $end
$var wire 1 \& AandB $end
$var wire 1 ]& AxorB $end
$var wire 1 ^& AxorBandcarryin $end
$var wire 1 _& a $end
$var wire 1 `& b $end
$var wire 1 a& carryin $end
$var wire 1 b& carryout $end
$var wire 1 c& sum $end
$upscope $end
$upscope $end
$scope begin gen1[27] $end
$scope module addgates $end
$var wire 1 d& AandB $end
$var wire 1 e& AxorB $end
$var wire 1 f& AxorBandcarryin $end
$var wire 1 g& a $end
$var wire 1 h& b $end
$var wire 1 i& carryin $end
$var wire 1 j& carryout $end
$var wire 1 k& sum $end
$upscope $end
$upscope $end
$scope begin gen1[28] $end
$scope module addgates $end
$var wire 1 l& AandB $end
$var wire 1 m& AxorB $end
$var wire 1 n& AxorBandcarryin $end
$var wire 1 o& a $end
$var wire 1 p& b $end
$var wire 1 q& carryin $end
$var wire 1 r& carryout $end
$var wire 1 s& sum $end
$upscope $end
$upscope $end
$scope begin gen1[29] $end
$scope module addgates $end
$var wire 1 t& AandB $end
$var wire 1 u& AxorB $end
$var wire 1 v& AxorBandcarryin $end
$var wire 1 w& a $end
$var wire 1 x& b $end
$var wire 1 y& carryin $end
$var wire 1 z& carryout $end
$var wire 1 {& sum $end
$upscope $end
$upscope $end
$scope begin gen1[30] $end
$scope module addgates $end
$var wire 1 |& AandB $end
$var wire 1 }& AxorB $end
$var wire 1 ~& AxorBandcarryin $end
$var wire 1 !' a $end
$var wire 1 "' b $end
$var wire 1 #' carryin $end
$var wire 1 $' carryout $end
$var wire 1 %' sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module mymux $end
$var wire 32 &' addResult [31:0] $end
$var wire 32 '' andResult [31:0] $end
$var wire 32 (' doAdd [31:0] $end
$var wire 32 )' doAnd [31:0] $end
$var wire 32 *' doOr [31:0] $end
$var wire 1 +' doSlt $end
$var wire 32 ,' doXor [31:0] $end
$var wire 3 -' muxindex [2:0] $end
$var wire 3 .' notCommand [2:0] $end
$var wire 32 /' orResult [31:0] $end
$var wire 32 0' result [31:0] $end
$var wire 32 1' sltResult [31:0] $end
$var wire 32 2' xorResult [31:0] $end
$scope begin gen1[0] $end
$upscope $end
$scope begin gen1[1] $end
$upscope $end
$scope begin gen1[2] $end
$upscope $end
$scope begin gen2[0] $end
$upscope $end
$scope begin gen2[1] $end
$upscope $end
$scope begin gen2[2] $end
$upscope $end
$scope begin gen2[3] $end
$upscope $end
$scope begin gen2[4] $end
$upscope $end
$scope begin gen2[5] $end
$upscope $end
$scope begin gen2[6] $end
$upscope $end
$scope begin gen2[7] $end
$upscope $end
$scope begin gen2[8] $end
$upscope $end
$scope begin gen2[9] $end
$upscope $end
$scope begin gen2[10] $end
$upscope $end
$scope begin gen2[11] $end
$upscope $end
$scope begin gen2[12] $end
$upscope $end
$scope begin gen2[13] $end
$upscope $end
$scope begin gen2[14] $end
$upscope $end
$scope begin gen2[15] $end
$upscope $end
$scope begin gen2[16] $end
$upscope $end
$scope begin gen2[17] $end
$upscope $end
$scope begin gen2[18] $end
$upscope $end
$scope begin gen2[19] $end
$upscope $end
$scope begin gen2[20] $end
$upscope $end
$scope begin gen2[21] $end
$upscope $end
$scope begin gen2[22] $end
$upscope $end
$scope begin gen2[23] $end
$upscope $end
$scope begin gen2[24] $end
$upscope $end
$scope begin gen2[25] $end
$upscope $end
$scope begin gen2[26] $end
$upscope $end
$scope begin gen2[27] $end
$upscope $end
$scope begin gen2[28] $end
$upscope $end
$scope begin gen2[29] $end
$upscope $end
$scope begin gen2[30] $end
$upscope $end
$scope begin gen2[31] $end
$upscope $end
$upscope $end
$scope module myslt2 $end
$var wire 1 3' carryout $end
$var wire 32 4' operandA [31:0] $end
$var wire 32 5' operandB [31:0] $end
$var wire 1 6' overflow $end
$var wire 1 1 sltResult $end
$var wire 32 7' subResult [31:0] $end
$scope module myALU $end
$var wire 1 8' M $end
$var wire 32 9' MxorB [31:0] $end
$var wire 32 :' addResult [31:0] $end
$var wire 1 3' carryout $end
$var wire 31 ;' carryoutin [30:0] $end
$var wire 32 <' operandA [31:0] $end
$var wire 32 =' operandB [31:0] $end
$var wire 1 6' overflow $end
$scope module myxor $end
$var wire 32 >' operandA [31:0] $end
$var wire 1 8' operandB $end
$var wire 32 ?' xorResult [31:0] $end
$scope begin gen1[0] $end
$upscope $end
$scope begin gen1[1] $end
$upscope $end
$scope begin gen1[2] $end
$upscope $end
$scope begin gen1[3] $end
$upscope $end
$scope begin gen1[4] $end
$upscope $end
$scope begin gen1[5] $end
$upscope $end
$scope begin gen1[6] $end
$upscope $end
$scope begin gen1[7] $end
$upscope $end
$scope begin gen1[8] $end
$upscope $end
$scope begin gen1[9] $end
$upscope $end
$scope begin gen1[10] $end
$upscope $end
$scope begin gen1[11] $end
$upscope $end
$scope begin gen1[12] $end
$upscope $end
$scope begin gen1[13] $end
$upscope $end
$scope begin gen1[14] $end
$upscope $end
$scope begin gen1[15] $end
$upscope $end
$scope begin gen1[16] $end
$upscope $end
$scope begin gen1[17] $end
$upscope $end
$scope begin gen1[18] $end
$upscope $end
$scope begin gen1[19] $end
$upscope $end
$scope begin gen1[20] $end
$upscope $end
$scope begin gen1[21] $end
$upscope $end
$scope begin gen1[22] $end
$upscope $end
$scope begin gen1[23] $end
$upscope $end
$scope begin gen1[24] $end
$upscope $end
$scope begin gen1[25] $end
$upscope $end
$scope begin gen1[26] $end
$upscope $end
$scope begin gen1[27] $end
$upscope $end
$scope begin gen1[28] $end
$upscope $end
$scope begin gen1[29] $end
$upscope $end
$scope begin gen1[30] $end
$upscope $end
$scope begin gen1[31] $end
$upscope $end
$upscope $end
$scope module add0 $end
$var wire 1 @' AandB $end
$var wire 1 A' AxorB $end
$var wire 1 B' AxorBandcarryin $end
$var wire 1 C' a $end
$var wire 1 D' b $end
$var wire 1 8' carryin $end
$var wire 1 E' carryout $end
$var wire 1 F' sum $end
$upscope $end
$scope module add31 $end
$var wire 1 G' AandB $end
$var wire 1 H' AxorB $end
$var wire 1 I' AxorBandcarryin $end
$var wire 1 J' a $end
$var wire 1 K' b $end
$var wire 1 L' carryin $end
$var wire 1 3' carryout $end
$var wire 1 M' sum $end
$upscope $end
$scope begin gen1[1] $end
$scope module addgates $end
$var wire 1 N' AandB $end
$var wire 1 O' AxorB $end
$var wire 1 P' AxorBandcarryin $end
$var wire 1 Q' a $end
$var wire 1 R' b $end
$var wire 1 S' carryin $end
$var wire 1 T' carryout $end
$var wire 1 U' sum $end
$upscope $end
$upscope $end
$scope begin gen1[2] $end
$scope module addgates $end
$var wire 1 V' AandB $end
$var wire 1 W' AxorB $end
$var wire 1 X' AxorBandcarryin $end
$var wire 1 Y' a $end
$var wire 1 Z' b $end
$var wire 1 [' carryin $end
$var wire 1 \' carryout $end
$var wire 1 ]' sum $end
$upscope $end
$upscope $end
$scope begin gen1[3] $end
$scope module addgates $end
$var wire 1 ^' AandB $end
$var wire 1 _' AxorB $end
$var wire 1 `' AxorBandcarryin $end
$var wire 1 a' a $end
$var wire 1 b' b $end
$var wire 1 c' carryin $end
$var wire 1 d' carryout $end
$var wire 1 e' sum $end
$upscope $end
$upscope $end
$scope begin gen1[4] $end
$scope module addgates $end
$var wire 1 f' AandB $end
$var wire 1 g' AxorB $end
$var wire 1 h' AxorBandcarryin $end
$var wire 1 i' a $end
$var wire 1 j' b $end
$var wire 1 k' carryin $end
$var wire 1 l' carryout $end
$var wire 1 m' sum $end
$upscope $end
$upscope $end
$scope begin gen1[5] $end
$scope module addgates $end
$var wire 1 n' AandB $end
$var wire 1 o' AxorB $end
$var wire 1 p' AxorBandcarryin $end
$var wire 1 q' a $end
$var wire 1 r' b $end
$var wire 1 s' carryin $end
$var wire 1 t' carryout $end
$var wire 1 u' sum $end
$upscope $end
$upscope $end
$scope begin gen1[6] $end
$scope module addgates $end
$var wire 1 v' AandB $end
$var wire 1 w' AxorB $end
$var wire 1 x' AxorBandcarryin $end
$var wire 1 y' a $end
$var wire 1 z' b $end
$var wire 1 {' carryin $end
$var wire 1 |' carryout $end
$var wire 1 }' sum $end
$upscope $end
$upscope $end
$scope begin gen1[7] $end
$scope module addgates $end
$var wire 1 ~' AandB $end
$var wire 1 !( AxorB $end
$var wire 1 "( AxorBandcarryin $end
$var wire 1 #( a $end
$var wire 1 $( b $end
$var wire 1 %( carryin $end
$var wire 1 &( carryout $end
$var wire 1 '( sum $end
$upscope $end
$upscope $end
$scope begin gen1[8] $end
$scope module addgates $end
$var wire 1 (( AandB $end
$var wire 1 )( AxorB $end
$var wire 1 *( AxorBandcarryin $end
$var wire 1 +( a $end
$var wire 1 ,( b $end
$var wire 1 -( carryin $end
$var wire 1 .( carryout $end
$var wire 1 /( sum $end
$upscope $end
$upscope $end
$scope begin gen1[9] $end
$scope module addgates $end
$var wire 1 0( AandB $end
$var wire 1 1( AxorB $end
$var wire 1 2( AxorBandcarryin $end
$var wire 1 3( a $end
$var wire 1 4( b $end
$var wire 1 5( carryin $end
$var wire 1 6( carryout $end
$var wire 1 7( sum $end
$upscope $end
$upscope $end
$scope begin gen1[10] $end
$scope module addgates $end
$var wire 1 8( AandB $end
$var wire 1 9( AxorB $end
$var wire 1 :( AxorBandcarryin $end
$var wire 1 ;( a $end
$var wire 1 <( b $end
$var wire 1 =( carryin $end
$var wire 1 >( carryout $end
$var wire 1 ?( sum $end
$upscope $end
$upscope $end
$scope begin gen1[11] $end
$scope module addgates $end
$var wire 1 @( AandB $end
$var wire 1 A( AxorB $end
$var wire 1 B( AxorBandcarryin $end
$var wire 1 C( a $end
$var wire 1 D( b $end
$var wire 1 E( carryin $end
$var wire 1 F( carryout $end
$var wire 1 G( sum $end
$upscope $end
$upscope $end
$scope begin gen1[12] $end
$scope module addgates $end
$var wire 1 H( AandB $end
$var wire 1 I( AxorB $end
$var wire 1 J( AxorBandcarryin $end
$var wire 1 K( a $end
$var wire 1 L( b $end
$var wire 1 M( carryin $end
$var wire 1 N( carryout $end
$var wire 1 O( sum $end
$upscope $end
$upscope $end
$scope begin gen1[13] $end
$scope module addgates $end
$var wire 1 P( AandB $end
$var wire 1 Q( AxorB $end
$var wire 1 R( AxorBandcarryin $end
$var wire 1 S( a $end
$var wire 1 T( b $end
$var wire 1 U( carryin $end
$var wire 1 V( carryout $end
$var wire 1 W( sum $end
$upscope $end
$upscope $end
$scope begin gen1[14] $end
$scope module addgates $end
$var wire 1 X( AandB $end
$var wire 1 Y( AxorB $end
$var wire 1 Z( AxorBandcarryin $end
$var wire 1 [( a $end
$var wire 1 \( b $end
$var wire 1 ]( carryin $end
$var wire 1 ^( carryout $end
$var wire 1 _( sum $end
$upscope $end
$upscope $end
$scope begin gen1[15] $end
$scope module addgates $end
$var wire 1 `( AandB $end
$var wire 1 a( AxorB $end
$var wire 1 b( AxorBandcarryin $end
$var wire 1 c( a $end
$var wire 1 d( b $end
$var wire 1 e( carryin $end
$var wire 1 f( carryout $end
$var wire 1 g( sum $end
$upscope $end
$upscope $end
$scope begin gen1[16] $end
$scope module addgates $end
$var wire 1 h( AandB $end
$var wire 1 i( AxorB $end
$var wire 1 j( AxorBandcarryin $end
$var wire 1 k( a $end
$var wire 1 l( b $end
$var wire 1 m( carryin $end
$var wire 1 n( carryout $end
$var wire 1 o( sum $end
$upscope $end
$upscope $end
$scope begin gen1[17] $end
$scope module addgates $end
$var wire 1 p( AandB $end
$var wire 1 q( AxorB $end
$var wire 1 r( AxorBandcarryin $end
$var wire 1 s( a $end
$var wire 1 t( b $end
$var wire 1 u( carryin $end
$var wire 1 v( carryout $end
$var wire 1 w( sum $end
$upscope $end
$upscope $end
$scope begin gen1[18] $end
$scope module addgates $end
$var wire 1 x( AandB $end
$var wire 1 y( AxorB $end
$var wire 1 z( AxorBandcarryin $end
$var wire 1 {( a $end
$var wire 1 |( b $end
$var wire 1 }( carryin $end
$var wire 1 ~( carryout $end
$var wire 1 !) sum $end
$upscope $end
$upscope $end
$scope begin gen1[19] $end
$scope module addgates $end
$var wire 1 ") AandB $end
$var wire 1 #) AxorB $end
$var wire 1 $) AxorBandcarryin $end
$var wire 1 %) a $end
$var wire 1 &) b $end
$var wire 1 ') carryin $end
$var wire 1 () carryout $end
$var wire 1 )) sum $end
$upscope $end
$upscope $end
$scope begin gen1[20] $end
$scope module addgates $end
$var wire 1 *) AandB $end
$var wire 1 +) AxorB $end
$var wire 1 ,) AxorBandcarryin $end
$var wire 1 -) a $end
$var wire 1 .) b $end
$var wire 1 /) carryin $end
$var wire 1 0) carryout $end
$var wire 1 1) sum $end
$upscope $end
$upscope $end
$scope begin gen1[21] $end
$scope module addgates $end
$var wire 1 2) AandB $end
$var wire 1 3) AxorB $end
$var wire 1 4) AxorBandcarryin $end
$var wire 1 5) a $end
$var wire 1 6) b $end
$var wire 1 7) carryin $end
$var wire 1 8) carryout $end
$var wire 1 9) sum $end
$upscope $end
$upscope $end
$scope begin gen1[22] $end
$scope module addgates $end
$var wire 1 :) AandB $end
$var wire 1 ;) AxorB $end
$var wire 1 <) AxorBandcarryin $end
$var wire 1 =) a $end
$var wire 1 >) b $end
$var wire 1 ?) carryin $end
$var wire 1 @) carryout $end
$var wire 1 A) sum $end
$upscope $end
$upscope $end
$scope begin gen1[23] $end
$scope module addgates $end
$var wire 1 B) AandB $end
$var wire 1 C) AxorB $end
$var wire 1 D) AxorBandcarryin $end
$var wire 1 E) a $end
$var wire 1 F) b $end
$var wire 1 G) carryin $end
$var wire 1 H) carryout $end
$var wire 1 I) sum $end
$upscope $end
$upscope $end
$scope begin gen1[24] $end
$scope module addgates $end
$var wire 1 J) AandB $end
$var wire 1 K) AxorB $end
$var wire 1 L) AxorBandcarryin $end
$var wire 1 M) a $end
$var wire 1 N) b $end
$var wire 1 O) carryin $end
$var wire 1 P) carryout $end
$var wire 1 Q) sum $end
$upscope $end
$upscope $end
$scope begin gen1[25] $end
$scope module addgates $end
$var wire 1 R) AandB $end
$var wire 1 S) AxorB $end
$var wire 1 T) AxorBandcarryin $end
$var wire 1 U) a $end
$var wire 1 V) b $end
$var wire 1 W) carryin $end
$var wire 1 X) carryout $end
$var wire 1 Y) sum $end
$upscope $end
$upscope $end
$scope begin gen1[26] $end
$scope module addgates $end
$var wire 1 Z) AandB $end
$var wire 1 [) AxorB $end
$var wire 1 \) AxorBandcarryin $end
$var wire 1 ]) a $end
$var wire 1 ^) b $end
$var wire 1 _) carryin $end
$var wire 1 `) carryout $end
$var wire 1 a) sum $end
$upscope $end
$upscope $end
$scope begin gen1[27] $end
$scope module addgates $end
$var wire 1 b) AandB $end
$var wire 1 c) AxorB $end
$var wire 1 d) AxorBandcarryin $end
$var wire 1 e) a $end
$var wire 1 f) b $end
$var wire 1 g) carryin $end
$var wire 1 h) carryout $end
$var wire 1 i) sum $end
$upscope $end
$upscope $end
$scope begin gen1[28] $end
$scope module addgates $end
$var wire 1 j) AandB $end
$var wire 1 k) AxorB $end
$var wire 1 l) AxorBandcarryin $end
$var wire 1 m) a $end
$var wire 1 n) b $end
$var wire 1 o) carryin $end
$var wire 1 p) carryout $end
$var wire 1 q) sum $end
$upscope $end
$upscope $end
$scope begin gen1[29] $end
$scope module addgates $end
$var wire 1 r) AandB $end
$var wire 1 s) AxorB $end
$var wire 1 t) AxorBandcarryin $end
$var wire 1 u) a $end
$var wire 1 v) b $end
$var wire 1 w) carryin $end
$var wire 1 x) carryout $end
$var wire 1 y) sum $end
$upscope $end
$upscope $end
$scope begin gen1[30] $end
$scope module addgates $end
$var wire 1 z) AandB $end
$var wire 1 {) AxorB $end
$var wire 1 |) AxorBandcarryin $end
$var wire 1 }) a $end
$var wire 1 ~) b $end
$var wire 1 !* carryin $end
$var wire 1 "* carryout $end
$var wire 1 #* sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module myslt3 $end
$var wire 1 $* carryout $end
$var wire 32 %* operandA [31:0] $end
$var wire 32 &* operandB [31:0] $end
$var wire 1 '* overflow $end
$var wire 1 2 sltResult $end
$var wire 32 (* subResult [31:0] $end
$scope module myALU $end
$var wire 1 )* M $end
$var wire 32 ** MxorB [31:0] $end
$var wire 32 +* addResult [31:0] $end
$var wire 1 $* carryout $end
$var wire 31 ,* carryoutin [30:0] $end
$var wire 32 -* operandA [31:0] $end
$var wire 32 .* operandB [31:0] $end
$var wire 1 '* overflow $end
$scope module myxor $end
$var wire 32 /* operandA [31:0] $end
$var wire 1 )* operandB $end
$var wire 32 0* xorResult [31:0] $end
$scope begin gen1[0] $end
$upscope $end
$scope begin gen1[1] $end
$upscope $end
$scope begin gen1[2] $end
$upscope $end
$scope begin gen1[3] $end
$upscope $end
$scope begin gen1[4] $end
$upscope $end
$scope begin gen1[5] $end
$upscope $end
$scope begin gen1[6] $end
$upscope $end
$scope begin gen1[7] $end
$upscope $end
$scope begin gen1[8] $end
$upscope $end
$scope begin gen1[9] $end
$upscope $end
$scope begin gen1[10] $end
$upscope $end
$scope begin gen1[11] $end
$upscope $end
$scope begin gen1[12] $end
$upscope $end
$scope begin gen1[13] $end
$upscope $end
$scope begin gen1[14] $end
$upscope $end
$scope begin gen1[15] $end
$upscope $end
$scope begin gen1[16] $end
$upscope $end
$scope begin gen1[17] $end
$upscope $end
$scope begin gen1[18] $end
$upscope $end
$scope begin gen1[19] $end
$upscope $end
$scope begin gen1[20] $end
$upscope $end
$scope begin gen1[21] $end
$upscope $end
$scope begin gen1[22] $end
$upscope $end
$scope begin gen1[23] $end
$upscope $end
$scope begin gen1[24] $end
$upscope $end
$scope begin gen1[25] $end
$upscope $end
$scope begin gen1[26] $end
$upscope $end
$scope begin gen1[27] $end
$upscope $end
$scope begin gen1[28] $end
$upscope $end
$scope begin gen1[29] $end
$upscope $end
$scope begin gen1[30] $end
$upscope $end
$scope begin gen1[31] $end
$upscope $end
$upscope $end
$scope module add0 $end
$var wire 1 1* AandB $end
$var wire 1 2* AxorB $end
$var wire 1 3* AxorBandcarryin $end
$var wire 1 4* a $end
$var wire 1 5* b $end
$var wire 1 )* carryin $end
$var wire 1 6* carryout $end
$var wire 1 7* sum $end
$upscope $end
$scope module add31 $end
$var wire 1 8* AandB $end
$var wire 1 9* AxorB $end
$var wire 1 :* AxorBandcarryin $end
$var wire 1 ;* a $end
$var wire 1 <* b $end
$var wire 1 =* carryin $end
$var wire 1 $* carryout $end
$var wire 1 >* sum $end
$upscope $end
$scope begin gen1[1] $end
$scope module addgates $end
$var wire 1 ?* AandB $end
$var wire 1 @* AxorB $end
$var wire 1 A* AxorBandcarryin $end
$var wire 1 B* a $end
$var wire 1 C* b $end
$var wire 1 D* carryin $end
$var wire 1 E* carryout $end
$var wire 1 F* sum $end
$upscope $end
$upscope $end
$scope begin gen1[2] $end
$scope module addgates $end
$var wire 1 G* AandB $end
$var wire 1 H* AxorB $end
$var wire 1 I* AxorBandcarryin $end
$var wire 1 J* a $end
$var wire 1 K* b $end
$var wire 1 L* carryin $end
$var wire 1 M* carryout $end
$var wire 1 N* sum $end
$upscope $end
$upscope $end
$scope begin gen1[3] $end
$scope module addgates $end
$var wire 1 O* AandB $end
$var wire 1 P* AxorB $end
$var wire 1 Q* AxorBandcarryin $end
$var wire 1 R* a $end
$var wire 1 S* b $end
$var wire 1 T* carryin $end
$var wire 1 U* carryout $end
$var wire 1 V* sum $end
$upscope $end
$upscope $end
$scope begin gen1[4] $end
$scope module addgates $end
$var wire 1 W* AandB $end
$var wire 1 X* AxorB $end
$var wire 1 Y* AxorBandcarryin $end
$var wire 1 Z* a $end
$var wire 1 [* b $end
$var wire 1 \* carryin $end
$var wire 1 ]* carryout $end
$var wire 1 ^* sum $end
$upscope $end
$upscope $end
$scope begin gen1[5] $end
$scope module addgates $end
$var wire 1 _* AandB $end
$var wire 1 `* AxorB $end
$var wire 1 a* AxorBandcarryin $end
$var wire 1 b* a $end
$var wire 1 c* b $end
$var wire 1 d* carryin $end
$var wire 1 e* carryout $end
$var wire 1 f* sum $end
$upscope $end
$upscope $end
$scope begin gen1[6] $end
$scope module addgates $end
$var wire 1 g* AandB $end
$var wire 1 h* AxorB $end
$var wire 1 i* AxorBandcarryin $end
$var wire 1 j* a $end
$var wire 1 k* b $end
$var wire 1 l* carryin $end
$var wire 1 m* carryout $end
$var wire 1 n* sum $end
$upscope $end
$upscope $end
$scope begin gen1[7] $end
$scope module addgates $end
$var wire 1 o* AandB $end
$var wire 1 p* AxorB $end
$var wire 1 q* AxorBandcarryin $end
$var wire 1 r* a $end
$var wire 1 s* b $end
$var wire 1 t* carryin $end
$var wire 1 u* carryout $end
$var wire 1 v* sum $end
$upscope $end
$upscope $end
$scope begin gen1[8] $end
$scope module addgates $end
$var wire 1 w* AandB $end
$var wire 1 x* AxorB $end
$var wire 1 y* AxorBandcarryin $end
$var wire 1 z* a $end
$var wire 1 {* b $end
$var wire 1 |* carryin $end
$var wire 1 }* carryout $end
$var wire 1 ~* sum $end
$upscope $end
$upscope $end
$scope begin gen1[9] $end
$scope module addgates $end
$var wire 1 !+ AandB $end
$var wire 1 "+ AxorB $end
$var wire 1 #+ AxorBandcarryin $end
$var wire 1 $+ a $end
$var wire 1 %+ b $end
$var wire 1 &+ carryin $end
$var wire 1 '+ carryout $end
$var wire 1 (+ sum $end
$upscope $end
$upscope $end
$scope begin gen1[10] $end
$scope module addgates $end
$var wire 1 )+ AandB $end
$var wire 1 *+ AxorB $end
$var wire 1 ++ AxorBandcarryin $end
$var wire 1 ,+ a $end
$var wire 1 -+ b $end
$var wire 1 .+ carryin $end
$var wire 1 /+ carryout $end
$var wire 1 0+ sum $end
$upscope $end
$upscope $end
$scope begin gen1[11] $end
$scope module addgates $end
$var wire 1 1+ AandB $end
$var wire 1 2+ AxorB $end
$var wire 1 3+ AxorBandcarryin $end
$var wire 1 4+ a $end
$var wire 1 5+ b $end
$var wire 1 6+ carryin $end
$var wire 1 7+ carryout $end
$var wire 1 8+ sum $end
$upscope $end
$upscope $end
$scope begin gen1[12] $end
$scope module addgates $end
$var wire 1 9+ AandB $end
$var wire 1 :+ AxorB $end
$var wire 1 ;+ AxorBandcarryin $end
$var wire 1 <+ a $end
$var wire 1 =+ b $end
$var wire 1 >+ carryin $end
$var wire 1 ?+ carryout $end
$var wire 1 @+ sum $end
$upscope $end
$upscope $end
$scope begin gen1[13] $end
$scope module addgates $end
$var wire 1 A+ AandB $end
$var wire 1 B+ AxorB $end
$var wire 1 C+ AxorBandcarryin $end
$var wire 1 D+ a $end
$var wire 1 E+ b $end
$var wire 1 F+ carryin $end
$var wire 1 G+ carryout $end
$var wire 1 H+ sum $end
$upscope $end
$upscope $end
$scope begin gen1[14] $end
$scope module addgates $end
$var wire 1 I+ AandB $end
$var wire 1 J+ AxorB $end
$var wire 1 K+ AxorBandcarryin $end
$var wire 1 L+ a $end
$var wire 1 M+ b $end
$var wire 1 N+ carryin $end
$var wire 1 O+ carryout $end
$var wire 1 P+ sum $end
$upscope $end
$upscope $end
$scope begin gen1[15] $end
$scope module addgates $end
$var wire 1 Q+ AandB $end
$var wire 1 R+ AxorB $end
$var wire 1 S+ AxorBandcarryin $end
$var wire 1 T+ a $end
$var wire 1 U+ b $end
$var wire 1 V+ carryin $end
$var wire 1 W+ carryout $end
$var wire 1 X+ sum $end
$upscope $end
$upscope $end
$scope begin gen1[16] $end
$scope module addgates $end
$var wire 1 Y+ AandB $end
$var wire 1 Z+ AxorB $end
$var wire 1 [+ AxorBandcarryin $end
$var wire 1 \+ a $end
$var wire 1 ]+ b $end
$var wire 1 ^+ carryin $end
$var wire 1 _+ carryout $end
$var wire 1 `+ sum $end
$upscope $end
$upscope $end
$scope begin gen1[17] $end
$scope module addgates $end
$var wire 1 a+ AandB $end
$var wire 1 b+ AxorB $end
$var wire 1 c+ AxorBandcarryin $end
$var wire 1 d+ a $end
$var wire 1 e+ b $end
$var wire 1 f+ carryin $end
$var wire 1 g+ carryout $end
$var wire 1 h+ sum $end
$upscope $end
$upscope $end
$scope begin gen1[18] $end
$scope module addgates $end
$var wire 1 i+ AandB $end
$var wire 1 j+ AxorB $end
$var wire 1 k+ AxorBandcarryin $end
$var wire 1 l+ a $end
$var wire 1 m+ b $end
$var wire 1 n+ carryin $end
$var wire 1 o+ carryout $end
$var wire 1 p+ sum $end
$upscope $end
$upscope $end
$scope begin gen1[19] $end
$scope module addgates $end
$var wire 1 q+ AandB $end
$var wire 1 r+ AxorB $end
$var wire 1 s+ AxorBandcarryin $end
$var wire 1 t+ a $end
$var wire 1 u+ b $end
$var wire 1 v+ carryin $end
$var wire 1 w+ carryout $end
$var wire 1 x+ sum $end
$upscope $end
$upscope $end
$scope begin gen1[20] $end
$scope module addgates $end
$var wire 1 y+ AandB $end
$var wire 1 z+ AxorB $end
$var wire 1 {+ AxorBandcarryin $end
$var wire 1 |+ a $end
$var wire 1 }+ b $end
$var wire 1 ~+ carryin $end
$var wire 1 !, carryout $end
$var wire 1 ", sum $end
$upscope $end
$upscope $end
$scope begin gen1[21] $end
$scope module addgates $end
$var wire 1 #, AandB $end
$var wire 1 $, AxorB $end
$var wire 1 %, AxorBandcarryin $end
$var wire 1 &, a $end
$var wire 1 ', b $end
$var wire 1 (, carryin $end
$var wire 1 ), carryout $end
$var wire 1 *, sum $end
$upscope $end
$upscope $end
$scope begin gen1[22] $end
$scope module addgates $end
$var wire 1 +, AandB $end
$var wire 1 ,, AxorB $end
$var wire 1 -, AxorBandcarryin $end
$var wire 1 ., a $end
$var wire 1 /, b $end
$var wire 1 0, carryin $end
$var wire 1 1, carryout $end
$var wire 1 2, sum $end
$upscope $end
$upscope $end
$scope begin gen1[23] $end
$scope module addgates $end
$var wire 1 3, AandB $end
$var wire 1 4, AxorB $end
$var wire 1 5, AxorBandcarryin $end
$var wire 1 6, a $end
$var wire 1 7, b $end
$var wire 1 8, carryin $end
$var wire 1 9, carryout $end
$var wire 1 :, sum $end
$upscope $end
$upscope $end
$scope begin gen1[24] $end
$scope module addgates $end
$var wire 1 ;, AandB $end
$var wire 1 <, AxorB $end
$var wire 1 =, AxorBandcarryin $end
$var wire 1 >, a $end
$var wire 1 ?, b $end
$var wire 1 @, carryin $end
$var wire 1 A, carryout $end
$var wire 1 B, sum $end
$upscope $end
$upscope $end
$scope begin gen1[25] $end
$scope module addgates $end
$var wire 1 C, AandB $end
$var wire 1 D, AxorB $end
$var wire 1 E, AxorBandcarryin $end
$var wire 1 F, a $end
$var wire 1 G, b $end
$var wire 1 H, carryin $end
$var wire 1 I, carryout $end
$var wire 1 J, sum $end
$upscope $end
$upscope $end
$scope begin gen1[26] $end
$scope module addgates $end
$var wire 1 K, AandB $end
$var wire 1 L, AxorB $end
$var wire 1 M, AxorBandcarryin $end
$var wire 1 N, a $end
$var wire 1 O, b $end
$var wire 1 P, carryin $end
$var wire 1 Q, carryout $end
$var wire 1 R, sum $end
$upscope $end
$upscope $end
$scope begin gen1[27] $end
$scope module addgates $end
$var wire 1 S, AandB $end
$var wire 1 T, AxorB $end
$var wire 1 U, AxorBandcarryin $end
$var wire 1 V, a $end
$var wire 1 W, b $end
$var wire 1 X, carryin $end
$var wire 1 Y, carryout $end
$var wire 1 Z, sum $end
$upscope $end
$upscope $end
$scope begin gen1[28] $end
$scope module addgates $end
$var wire 1 [, AandB $end
$var wire 1 \, AxorB $end
$var wire 1 ], AxorBandcarryin $end
$var wire 1 ^, a $end
$var wire 1 _, b $end
$var wire 1 `, carryin $end
$var wire 1 a, carryout $end
$var wire 1 b, sum $end
$upscope $end
$upscope $end
$scope begin gen1[29] $end
$scope module addgates $end
$var wire 1 c, AandB $end
$var wire 1 d, AxorB $end
$var wire 1 e, AxorBandcarryin $end
$var wire 1 f, a $end
$var wire 1 g, b $end
$var wire 1 h, carryin $end
$var wire 1 i, carryout $end
$var wire 1 j, sum $end
$upscope $end
$upscope $end
$scope begin gen1[30] $end
$scope module addgates $end
$var wire 1 k, AandB $end
$var wire 1 l, AxorB $end
$var wire 1 m, AxorBandcarryin $end
$var wire 1 n, a $end
$var wire 1 o, b $end
$var wire 1 p, carryin $end
$var wire 1 q, carryout $end
$var wire 1 r, sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin gen1[0] $end
$upscope $end
$scope begin gen1[1] $end
$upscope $end
$scope begin gen1[2] $end
$upscope $end
$scope begin gen1[3] $end
$upscope $end
$scope begin gen1[4] $end
$upscope $end
$scope begin gen1[5] $end
$upscope $end
$scope begin gen1[6] $end
$upscope $end
$scope begin gen1[7] $end
$upscope $end
$scope begin gen1[8] $end
$upscope $end
$scope begin gen1[9] $end
$upscope $end
$scope begin gen1[10] $end
$upscope $end
$scope begin gen1[11] $end
$upscope $end
$scope begin gen1[12] $end
$upscope $end
$scope begin gen1[13] $end
$upscope $end
$scope begin gen1[14] $end
$upscope $end
$scope begin gen1[15] $end
$upscope $end
$scope begin gen1[16] $end
$upscope $end
$scope begin gen1[17] $end
$upscope $end
$scope begin gen1[18] $end
$upscope $end
$scope begin gen1[19] $end
$upscope $end
$scope begin gen1[20] $end
$upscope $end
$scope begin gen1[21] $end
$upscope $end
$scope begin gen1[22] $end
$upscope $end
$scope begin gen1[23] $end
$upscope $end
$scope begin gen1[24] $end
$upscope $end
$scope begin gen1[25] $end
$upscope $end
$scope begin gen1[26] $end
$upscope $end
$scope begin gen1[27] $end
$upscope $end
$scope begin gen1[28] $end
$upscope $end
$scope begin gen1[29] $end
$upscope $end
$scope begin gen1[30] $end
$upscope $end
$scope begin gen1[31] $end
$upscope $end
$upscope $end
$scope module testmux $end
$var wire 32 s, result [31:0] $end
$var reg 32 t, addResult [31:0] $end
$var reg 32 u, andResult [31:0] $end
$var reg 3 v, muxindex [2:0] $end
$var reg 32 w, orResult [31:0] $end
$var reg 32 x, sltResult [31:0] $end
$var reg 32 y, xorResult [31:0] $end
$scope module mymux $end
$var wire 32 z, addResult [31:0] $end
$var wire 32 {, andResult [31:0] $end
$var wire 32 |, doAdd [31:0] $end
$var wire 32 }, doAnd [31:0] $end
$var wire 32 ~, doOr [31:0] $end
$var wire 1 !- doSlt $end
$var wire 32 "- doXor [31:0] $end
$var wire 3 #- muxindex [2:0] $end
$var wire 3 $- notCommand [2:0] $end
$var wire 32 %- orResult [31:0] $end
$var wire 32 &- result [31:0] $end
$var wire 32 '- sltResult [31:0] $end
$var wire 32 (- xorResult [31:0] $end
$scope begin gen1[0] $end
$upscope $end
$scope begin gen1[1] $end
$upscope $end
$scope begin gen1[2] $end
$upscope $end
$scope begin gen2[0] $end
$upscope $end
$scope begin gen2[1] $end
$upscope $end
$scope begin gen2[2] $end
$upscope $end
$scope begin gen2[3] $end
$upscope $end
$scope begin gen2[4] $end
$upscope $end
$scope begin gen2[5] $end
$upscope $end
$scope begin gen2[6] $end
$upscope $end
$scope begin gen2[7] $end
$upscope $end
$scope begin gen2[8] $end
$upscope $end
$scope begin gen2[9] $end
$upscope $end
$scope begin gen2[10] $end
$upscope $end
$scope begin gen2[11] $end
$upscope $end
$scope begin gen2[12] $end
$upscope $end
$scope begin gen2[13] $end
$upscope $end
$scope begin gen2[14] $end
$upscope $end
$scope begin gen2[15] $end
$upscope $end
$scope begin gen2[16] $end
$upscope $end
$scope begin gen2[17] $end
$upscope $end
$scope begin gen2[18] $end
$upscope $end
$scope begin gen2[19] $end
$upscope $end
$scope begin gen2[20] $end
$upscope $end
$scope begin gen2[21] $end
$upscope $end
$scope begin gen2[22] $end
$upscope $end
$scope begin gen2[23] $end
$upscope $end
$scope begin gen2[24] $end
$upscope $end
$scope begin gen2[25] $end
$upscope $end
$scope begin gen2[26] $end
$upscope $end
$scope begin gen2[27] $end
$upscope $end
$scope begin gen2[28] $end
$upscope $end
$scope begin gen2[29] $end
$upscope $end
$scope begin gen2[30] $end
$upscope $end
$scope begin gen2[31] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b11 (-
b0 '-
bx &-
b10 %-
bz $-
b0 #-
bz "-
z!-
bz ~,
bz },
bzxzz |,
b1 {,
b100 z,
b11 y,
b0 x,
b10 w,
b0 v,
b1 u,
b100 t,
bx s,
xr,
xq,
xp,
xo,
0n,
xm,
xl,
zk,
xj,
xi,
xh,
xg,
0f,
xe,
xd,
zc,
xb,
xa,
x`,
x_,
0^,
x],
x\,
z[,
xZ,
xY,
xX,
xW,
0V,
xU,
xT,
zS,
xR,
xQ,
xP,
xO,
0N,
xM,
xL,
zK,
xJ,
xI,
xH,
xG,
0F,
xE,
xD,
zC,
xB,
xA,
x@,
x?,
0>,
x=,
x<,
z;,
x:,
x9,
x8,
x7,
06,
x5,
x4,
z3,
x2,
x1,
x0,
x/,
0.,
x-,
x,,
z+,
x*,
x),
x(,
x',
0&,
x%,
x$,
z#,
x",
x!,
x~+
x}+
0|+
x{+
xz+
zy+
xx+
xw+
xv+
xu+
0t+
xs+
xr+
zq+
xp+
xo+
xn+
xm+
0l+
xk+
xj+
zi+
xh+
xg+
xf+
xe+
0d+
xc+
xb+
za+
x`+
x_+
x^+
x]+
0\+
x[+
xZ+
zY+
xX+
xW+
xV+
xU+
0T+
xS+
xR+
zQ+
xP+
xO+
xN+
xM+
0L+
xK+
xJ+
zI+
xH+
xG+
xF+
xE+
0D+
xC+
xB+
zA+
x@+
x?+
x>+
x=+
0<+
x;+
x:+
z9+
x8+
x7+
x6+
x5+
04+
x3+
x2+
z1+
x0+
x/+
x.+
x-+
0,+
x++
x*+
z)+
x(+
x'+
x&+
x%+
0$+
x#+
x"+
z!+
x~*
x}*
x|*
x{*
0z*
xy*
xx*
zw*
xv*
xu*
xt*
xs*
0r*
xq*
xp*
zo*
xn*
xm*
xl*
xk*
0j*
xi*
xh*
zg*
xf*
xe*
xd*
xc*
0b*
xa*
x`*
z_*
x^*
x]*
x\*
x[*
0Z*
xY*
xX*
zW*
xV*
xU*
xT*
xS*
0R*
xQ*
xP*
zO*
xN*
xM*
xL*
xK*
0J*
xI*
xH*
zG*
xF*
xE*
xD*
xC*
0B*
xA*
x@*
z?*
x>*
x=*
x<*
0;*
x:*
x9*
z8*
x7*
x6*
x5*
04*
x3*
x2*
z1*
bx 0*
bx /*
bx .*
b0 -*
bx ,*
bx +*
bx **
1)*
bx (*
x'*
bx &*
b0 %*
x$*
x#*
x"*
x!*
z~)
x})
x|)
x{)
xz)
xy)
xx)
xw)
zv)
xu)
xt)
xs)
xr)
xq)
xp)
xo)
zn)
xm)
xl)
xk)
xj)
xi)
xh)
xg)
zf)
xe)
xd)
xc)
xb)
xa)
x`)
x_)
z^)
x])
x\)
x[)
xZ)
xY)
xX)
xW)
zV)
xU)
xT)
xS)
xR)
xQ)
xP)
xO)
zN)
xM)
xL)
xK)
xJ)
xI)
xH)
xG)
zF)
xE)
xD)
xC)
xB)
xA)
x@)
x?)
z>)
x=)
x<)
x;)
x:)
x9)
x8)
x7)
z6)
x5)
x4)
x3)
x2)
x1)
x0)
x/)
z.)
x-)
x,)
x+)
x*)
x))
x()
x')
z&)
x%)
x$)
x#)
x")
x!)
x~(
x}(
z|(
x{(
xz(
xy(
xx(
xw(
xv(
xu(
zt(
xs(
xr(
xq(
xp(
xo(
xn(
xm(
zl(
xk(
xj(
xi(
xh(
xg(
xf(
xe(
zd(
xc(
xb(
xa(
x`(
x_(
x^(
x](
z\(
x[(
xZ(
xY(
xX(
xW(
xV(
xU(
zT(
xS(
xR(
xQ(
xP(
xO(
xN(
xM(
zL(
xK(
xJ(
xI(
xH(
xG(
xF(
xE(
zD(
xC(
xB(
xA(
x@(
x?(
x>(
x=(
z<(
x;(
x:(
x9(
x8(
x7(
x6(
x5(
z4(
x3(
x2(
x1(
x0(
x/(
x.(
x-(
z,(
x+(
x*(
x)(
x((
x'(
x&(
x%(
z$(
x#(
x"(
x!(
x~'
x}'
x|'
x{'
zz'
xy'
xx'
xw'
xv'
xu'
xt'
xs'
zr'
xq'
xp'
xo'
xn'
xm'
xl'
xk'
zj'
xi'
xh'
xg'
xf'
xe'
xd'
xc'
zb'
xa'
x`'
x_'
x^'
x]'
x\'
x['
zZ'
xY'
xX'
xW'
xV'
xU'
xT'
xS'
zR'
xQ'
xP'
xO'
xN'
xM'
xL'
zK'
xJ'
xI'
xH'
xG'
xF'
xE'
zD'
xC'
xB'
xA'
x@'
bz ?'
b0 >'
b0 ='
bx <'
bx ;'
bx :'
bz 9'
18'
bx 7'
x6'
b0 5'
bx 4'
x3'
bx 2'
bx0000000000000000000000000000000 1'
bx 0'
bx /'
bx .'
bx -'
bx ,'
z+'
bx *'
bx )'
bx ('
bx ''
bx &'
x%'
x$'
x#'
x"'
z!'
x~&
x}&
x|&
x{&
xz&
xy&
xx&
zw&
xv&
xu&
xt&
xs&
xr&
xq&
xp&
zo&
xn&
xm&
xl&
xk&
xj&
xi&
xh&
zg&
xf&
xe&
xd&
xc&
xb&
xa&
x`&
z_&
x^&
x]&
x\&
x[&
xZ&
xY&
xX&
zW&
xV&
xU&
xT&
xS&
xR&
xQ&
xP&
zO&
xN&
xM&
xL&
xK&
xJ&
xI&
xH&
zG&
xF&
xE&
xD&
xC&
xB&
xA&
x@&
z?&
x>&
x=&
x<&
x;&
x:&
x9&
x8&
z7&
x6&
x5&
x4&
x3&
x2&
x1&
x0&
z/&
x.&
x-&
x,&
x+&
x*&
x)&
x(&
z'&
x&&
x%&
x$&
x#&
x"&
x!&
x~%
z}%
x|%
x{%
xz%
xy%
xx%
xw%
xv%
zu%
xt%
xs%
xr%
xq%
xp%
xo%
xn%
zm%
xl%
xk%
xj%
xi%
xh%
xg%
xf%
ze%
xd%
xc%
xb%
xa%
x`%
x_%
x^%
z]%
x\%
x[%
xZ%
xY%
xX%
xW%
xV%
zU%
xT%
xS%
xR%
xQ%
xP%
xO%
xN%
zM%
xL%
xK%
xJ%
xI%
xH%
xG%
xF%
zE%
xD%
xC%
xB%
xA%
x@%
x?%
x>%
z=%
x<%
x;%
x:%
x9%
x8%
x7%
x6%
z5%
x4%
x3%
x2%
x1%
x0%
x/%
x.%
z-%
x,%
x+%
x*%
x)%
x(%
x'%
x&%
z%%
x$%
x#%
x"%
x!%
x~$
x}$
x|$
z{$
xz$
xy$
xx$
xw$
xv$
xu$
xt$
zs$
xr$
xq$
xp$
xo$
xn$
xm$
xl$
zk$
xj$
xi$
xh$
xg$
xf$
xe$
xd$
zc$
xb$
xa$
x`$
x_$
x^$
x]$
x\$
z[$
xZ$
xY$
xX$
xW$
xV$
xU$
xT$
zS$
xR$
xQ$
xP$
xO$
xN$
xM$
zL$
xK$
xJ$
xI$
xH$
xG$
xF$
zE$
xD$
xC$
xB$
bx A$
bz @$
bz ?$
bz >$
bx =$
bx <$
bx ;$
1:$
bx 9$
x8$
bz 7$
bz 6$
x5$
x4$
x3$
x2$
x1$
z0$
x/$
x.$
x-$
x,$
x+$
x*$
x)$
z($
x'$
x&$
x%$
x$$
x#$
x"$
x!$
z~#
x}#
x|#
x{#
xz#
xy#
xx#
xw#
zv#
xu#
xt#
xs#
xr#
xq#
xp#
xo#
zn#
xm#
xl#
xk#
xj#
xi#
xh#
xg#
zf#
xe#
xd#
xc#
xb#
xa#
x`#
x_#
z^#
x]#
x\#
x[#
xZ#
xY#
xX#
xW#
zV#
xU#
xT#
xS#
xR#
xQ#
xP#
xO#
zN#
xM#
xL#
xK#
xJ#
xI#
xH#
xG#
zF#
xE#
xD#
xC#
xB#
xA#
x@#
x?#
z>#
x=#
x<#
x;#
x:#
x9#
x8#
x7#
z6#
x5#
x4#
x3#
x2#
x1#
x0#
x/#
z.#
x-#
x,#
x+#
x*#
x)#
x(#
x'#
z&#
x%#
x$#
x##
x"#
x!#
x~"
x}"
z|"
x{"
xz"
xy"
xx"
xw"
xv"
xu"
zt"
xs"
xr"
xq"
xp"
xo"
xn"
xm"
zl"
xk"
xj"
xi"
xh"
xg"
xf"
xe"
zd"
xc"
xb"
xa"
x`"
x_"
x^"
x]"
z\"
x["
xZ"
xY"
xX"
xW"
xV"
xU"
zT"
xS"
xR"
xQ"
xP"
xO"
xN"
xM"
zL"
xK"
xJ"
xI"
xH"
xG"
xF"
xE"
zD"
xC"
xB"
xA"
x@"
x?"
x>"
x="
z<"
x;"
x:"
x9"
x8"
x7"
x6"
x5"
z4"
x3"
x2"
x1"
x0"
x/"
x."
x-"
z,"
x+"
x*"
x)"
x("
x'"
x&"
x%"
z$"
x#"
x""
x!"
x~
x}
x|
x{
zz
xy
xx
xw
xv
xu
xt
xs
zr
xq
xp
xo
xn
xm
xl
xk
zj
xi
xh
xg
xf
xe
xd
xc
zb
xa
x`
x_
x^
x]
x\
z[
xZ
xY
xX
xW
xV
xU
zT
xS
xR
xQ
bx P
bz O
bz N
bz M
bx L
bx K
bx J
bx I
bx H
bx G
0F
0E
bx D
bx C
bx B
0A
0@
bx ?
bx >
bx =
bx <
x;
x:
x9
x8
bz 7
z6
bx 5
bx0000000000000000000000000000000 4
x3
x2
x1
bx 0
x/
bx .
bz -
bz ,
bx +
x*
x)
bx (
bx '
x&
bz %
x$
x#
bx "
bx !
$end
#10000
b111 $-
#30000
0+'
b0x00 |,
b0 },
b0 ~,
0!-
b0 "-
0k,
0c,
0[,
0S,
0K,
0C,
0;,
03,
0+,
0#,
0y+
0q+
0i+
0a+
0Y+
0Q+
0I+
0A+
09+
01+
0)+
0!+
0w*
0o*
0g*
0_*
0W*
0O*
0G*
0?*
08*
01*
#40000
b100 |,
#60000
1K'
1~)
1v)
1n)
1f)
1^)
1V)
1N)
1F)
1>)
16)
1.)
1&)
1|(
1t(
1l(
1d(
1\(
1T(
1L(
1D(
1<(
14(
1,(
1$(
1z'
1r'
1j'
1b'
1Z'
1R'
1D'
b0x00 s,
b0x00 &-
b11111111111111111111111111111111 9'
b11111111111111111111111111111111 ?'
#70000
b100 s,
b100 &-
#1000000000000
b1 v,
b1 #-
#1000000010000
b110 $-
#1000000030000
b11 "-
#1000000040000
b0 |,
#1000000060000
b111 s,
b111 &-
#1000000070000
b11 s,
b11 &-
#2000000000000
b10 v,
b10 #-
#2000000010000
b101 $-
#2000000030000
b0 "-
#2000000060000
b0 s,
b0 &-
#3000000000000
b11 v,
b11 #-
#3000000010000
b100 $-
#3000000030000
b1 },
#3000000060000
b1 s,
b1 &-
#4000000000000
b100 v,
b100 #-
#4000000010000
b11 $-
#4000000030000
b0 },
#4000000040000
b10 ~,
#4000000060000
b0 s,
b0 &-
#4000000070000
b10 s,
b10 &-
#5000000000000
